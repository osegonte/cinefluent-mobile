// App.tsx - Create this file in your root directory
import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  TextInput, 
  TouchableOpacity, 
  ScrollView, 
  Alert,
  StyleSheet,
  ActivityIndicator,
  SafeAreaView
} from 'react-native';

const API_BASE_URL = 'https://cinefluent-api-production.up.railway.app';

interface Movie {
  id: string;
  title: string;
  description: string;
  duration: number;
  difficulty_level: string;
  languages: string[];
  vocabulary_count: number;
  imdb_rating: number;
}

// Login Component
const LoginScreen = ({ onLoginSuccess }: { onLoginSuccess: () => void }) => {
  const [email, setEmail] = useState('enabled@example.com');
  const [password, setPassword] = useState('TestPass123!');
  const [loading, setLoading] = useState(false);

  const handleLogin = async () => {
    setLoading(true);
    
    try {
      console.log('üîê Attempting login...');
      
      const response = await fetch(`${API_BASE_URL}/api/v1/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();
      console.log('Login response:', data);

      if (response.ok) {
        Alert.alert('Success', 'Login successful!', [
          { text: 'Continue', onPress: onLoginSuccess }
        ]);
      } else {
        Alert.alert('Error', data.detail || data.message || 'Login failed');
      }
    } catch (error) {
      console.error('Login error:', error);
      Alert.alert('Error', 'Network error. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.loginContainer}>
      <View style={styles.loginCard}>
        <Text style={styles.title}>üé¨ CineFluent</Text>
        <Text style={styles.subtitle}>Learn languages through movies</Text>

        <Text style={styles.label}>Email</Text>
        <TextInput
          style={styles.input}
          value={email}
          onChangeText={setEmail}
          placeholder="Enter your email"
          keyboardType="email-address"
          autoCapitalize="none"
        />

        <Text style={styles.label}>Password</Text>
        <TextInput
          style={styles.input}
          value={password}
          onChangeText={setPassword}
          placeholder="Enter your password"
          secureTextEntry
        />

        <TouchableOpacity
          style={[styles.button, loading && styles.buttonDisabled]}
          onPress={handleLogin}
          disabled={loading}
        >
          <Text style={styles.buttonText}>
            {loading ? 'üîÑ Signing In...' : 'üöÄ Sign In'}
          </Text>
        </TouchableOpacity>

        <View style={styles.testAccount}>
          <Text style={styles.testTitle}>‚úÖ Test Account (pre-filled):</Text>
          <Text style={styles.testText}>Email: enabled@example.com</Text>
          <Text style={styles.testText}>Password: TestPass123!</Text>
        </View>

        <View style={styles.debug}>
          <Text style={styles.debugTitle}>üêõ Debug Info:</Text>
          <Text style={styles.debugText}>API: {API_BASE_URL}</Text>
          <Text style={styles.debugText}>Platform: Expo React Native</Text>
        </View>
      </View>
    </View>
  );
};

// Learn Component
const LearnScreen = ({ onBack }: { onBack: () => void }) => {
  const [movies, setMovies] = useState<Movie[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchMovies = async () => {
    try {
      console.log('üé¨ Fetching movies...');
      setLoading(true);
      setError(null);

      const response = await fetch(`${API_BASE_URL}/api/v1/movies`);
      const data = await response.json();

      console.log('Movies response:', data);

      if (response.ok && data.movies) {
        setMovies(data.movies);
        console.log(`‚úÖ Successfully loaded ${data.movies.length} movies`);
      } else {
        throw new Error('Failed to load movies');
      }
    } catch (err: any) {
      console.error('‚ùå Error loading movies:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchMovies();
  }, []);

  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#2563eb" />
        <Text style={styles.loadingText}>Loading movies...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorIcon}>‚ö†Ô∏è</Text>
        <Text style={styles.errorTitle}>Error Loading Movies</Text>
        <Text style={styles.errorMessage}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={fetchMovies}>
          <Text style={styles.retryButtonText}>Try Again</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.backButton} onPress={onBack}>
          <Text style={styles.backButtonText}>‚Üê Back to Login</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      {/* Header with Back Button */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={onBack}>
          <Text style={styles.backButtonText}>‚Üê Back to Login</Text>
        </TouchableOpacity>
      </View>

      {/* Debug Info */}
      <View style={styles.debugCard}>
        <Text style={styles.debugTitle}>üêõ Debug Status:</Text>
        <Text style={styles.debugText}>‚úÖ API Connection: Working</Text>
        <Text style={styles.debugText}>‚úÖ Movies Loaded: {movies.length}</Text>
        <Text style={styles.debugText}>‚úÖ Platform: Expo React Native</Text>
      </View>

      {/* Success Message */}
      {movies.length > 0 && (
        <View style={styles.successMessage}>
          <Text style={styles.successIcon}>üéâ</Text>
          <Text style={styles.successTitle}>SUCCESS! Movies loaded correctly!</Text>
          <Text style={styles.successText}>
            Found {movies.length} movies. Your API connection is working perfectly.
          </Text>
        </View>
      )}

      {/* Movies List */}
      <View style={styles.moviesContainer}>
        <Text style={styles.moviesTitle}>üé¨ Available Movies:</Text>
        {movies.map((movie) => (
          <View key={movie.id} style={styles.movieItem}>
            <Text style={styles.movieTitle}>{movie.title}</Text>
            <Text style={styles.movieDetails}>
              üìÖ Duration: {movie.duration}min | 
              üéØ Level: {movie.difficulty_level} | 
              üåç Language: {movie.languages[0]} | 
              ‚≠ê Rating: {movie.imdb_rating}
            </Text>
            {movie.description && (
              <Text style={styles.movieDescription} numberOfLines={2}>
                {movie.description}
              </Text>
            )}
            <TouchableOpacity 
              style={styles.startButton}
              onPress={() => Alert.alert('Start Learning', `Ready to learn with "${movie.title}"?`)}
            >
              <Text style={styles.startButtonText}>‚ñ∂Ô∏è Start Learning</Text>
            </TouchableOpacity>
          </View>
        ))}
      </View>
    </ScrollView>
  );
};

// Main App Component
export default function App() {
  const [currentScreen, setCurrentScreen] = useState<'login' | 'learn'>('login');

  return (
    <SafeAreaView style={styles.app}>
      {currentScreen === 'login' ? (
        <LoginScreen onLoginSuccess={() => setCurrentScreen('learn')} />
      ) : (
        <LearnScreen onBack={() => setCurrentScreen('login')} />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  app: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  container: {
    flex: 1,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loginContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f0f9ff',
  },
  loginCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 24,
    width: '100%',
    maxWidth: 400,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 8,
    color: '#1f2937',
  },
  subtitle: {
    fontSize: 16,
    color: '#6b7280',
    textAlign: 'center',
    marginBottom: 32,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    color: '#374151',
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    marginBottom: 16,
    backgroundColor: '#fff',
  },
  button: {
    backgroundColor: '#2563eb',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    marginTop: 8,
  },
  buttonDisabled: {
    backgroundColor: '#9ca3af',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  testAccount: {
    backgroundColor: '#f0fdf4',
    borderRadius: 8,
    padding: 16,
    marginTop: 16,
    borderWidth: 1,
    borderColor: '#bbf7d0',
  },
  testTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#059669',
    marginBottom: 8,
  },
  testText: {
    fontSize: 12,
    color: '#047857',
  },
  debug: {
    backgroundColor: '#eff6ff',
    borderRadius: 8,
    padding: 12,
    marginTop: 12,
    borderWidth: 1,
    borderColor: '#bfdbfe',
  },
  debugTitle: {
    fontSize: 12,
    fontWeight: '600',
    color: '#1e40af',
    marginBottom: 4,
  },
  debugText: {
    fontSize: 11,
    color: '#1e40af',
  },
  header: {
    padding: 16,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    color: '#2563eb',
    fontSize: 16,
    fontWeight: '500',
  },
  debugCard: {
    backgroundColor: '#eff6ff',
    margin: 16,
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#bfdbfe',
  },
  successMessage: {
    backgroundColor: '#f0fdf4',
    margin: 16,
    padding: 20,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#bbf7d0',
    alignItems: 'center',
  },
  successIcon: {
    fontSize: 32,
    marginBottom: 12,
  },
  successTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#059669',
    marginBottom: 8,
    textAlign: 'center',
  },
  successText: {
    fontSize: 14,
    color: '#047857',
    textAlign: 'center',
  },
  moviesContainer: {
    margin: 16,
  },
  moviesTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 16,
    color: '#1f2937',
  },
  movieItem: {
    backgroundColor: 'white',
    padding: 16,
    marginBottom: 12,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  movieTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    color: '#1f2937',
  },
  movieDetails: {
    fontSize: 12,
    color: '#6b7280',
    marginBottom: 8,
  },
  movieDescription: {
    fontSize: 14,
    color: '#4b5563',
    marginBottom: 12,
    lineHeight: 20,
  },
  startButton: {
    backgroundColor: '#2563eb',
    padding: 10,
    borderRadius: 6,
    alignItems: 'center',
  },
  startButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: '#6b7280',
  },
  errorIcon: {
    fontSize: 48,
    marginBottom: 16,
  },
  errorTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#dc2626',
    marginBottom: 8,
  },
  errorMessage: {
    fontSize: 14,
    color: '#991b1b',
    textAlign: 'center',
    marginBottom: 20,
  },
  retryButton: {
    backgroundColor: '#dc2626',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 6,
    marginBottom: 12,
  },
  retryButtonText: {
    color: 'white',
    fontWeight: '500',
  },
});